'''
    run GA
'''
import os
import sys
import json
from random import random
from ase.optimize import BFGS
from ase.ga.data import DataConnection
from ase.ga.population import Population
from ase.ga.standard_comparators import InteratomicDistanceComparator
from ase.ga.cutandsplicepairing import CutAndSplicePairing
from ase.ga.utilities import closest_distances_generator
from ase.ga.utilities import get_all_atom_types
from ase.ga.offspring_creator import OperationSelector
from ase.ga.standardmutations import MirrorMutation
from ase.ga.standardmutations import RattleMutation
from ase.ga.standardmutations import PermutationMutation
import pandas as pd
from deepmd.calculator import DP



# set calculator restore_path = conf['model']  # model path
# choose the best model by loss
index = sys.argv[1]
models = ['000', '001', '002', '003']
best_model_path = None
best_loss = 10000.0
for m in models:
    lcurve = '/home/catml/Projects/mlga/iters/{}/{}/lcurve.out'.format(index, m)
    pdata = pd.read_csv(lcurve, sep='\s+')
    l2_tst = pdata['batch'].values[-1]
    l2_trn = pdata['l2_tst'].values[-1]
    loss = l2_tst * 0.1 + l2_trn * 0.9
    if loss < best_loss:
        best_loss = loss
        best_model_path = '/home/catml/Projects/mlga/iters/{}/{}/frozen_model.pb'.format(index, m)

model_path = best_model_path
calc = DP(model=model_path)

atoms = read(poscar_path)   #  POSCAR generated by USPEX (writeOUT_POSCAR_GB.m)
atoms.set_calculator(calc)
dyn = BFGS(atoms, trajectory=None, logfile=None)
dyn.run(fmax=0.3, steps=100)


# get energy and forces
energy = atoms.get_potential_energy()
forces = atoms.get_forces()

# write energy and forces to txt file for USPEX read (Read_NN.m and Read_NN_Structure.m)

